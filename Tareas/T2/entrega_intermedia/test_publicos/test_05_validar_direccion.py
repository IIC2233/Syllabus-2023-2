import sys
import unittest

# Advertencia, la siguiente línea solo es utiliza por el cuerpo docente.
# Se considerará una mala práctica ocuparlo en sus evaluaciones.
sys.path.append("..")

from funciones_cliente import validar_direccion


class TestValidarDireccion(unittest.TestCase):

    def test_0(self):
        tablero = [
            ["P", "P", "P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "C", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "D")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_1_W(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "P", "-", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "-", "-", "P", "P", "P", "-", "-", "P", "-", "P", "-", "P", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "-", "P", "-", "P", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "C", "-", "-", "P", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "P", "-", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P", "P", "-", "P", "P", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["S", "-", "-", "P", "P", "P", "-", "P", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "-", "-", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "-", "-", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "W")
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_2_A(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P"],
            ["P", "P", "P", "P", "-", "-", "-", "P", "-", "-", "P", "P", "-", "-", "-", "P"],
            ["P", "P", "-", "P", "-", "-", "-", "-", "P", "P", "P", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "P", "-", "P", "-", "-", "P", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "P", "P", "P", "P", "P", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "P", "P", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "P", "-", "P", "-", "-", "-", "-", "P", "P", "-", "P", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "P", "C", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "P", "P", "-", "P", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "-", "P", "-", "-", "-", "-", "-", "-", "S"],
            ["P", "P", "-", "P", "P", "-", "P", "-", "-", "-", "P", "-", "P", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "A")
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_3_S(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "P", "-", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "-", "-", "P", "P", "P", "-", "-", "P", "-", "P", "-", "P", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "-", "P", "-", "P", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "-", "P", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "C", "-", "P", "-", "-", "P", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "P", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P", "P", "-", "P", "P", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "-", "P", "P", "P", "-", "P", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "P", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "-", "-", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "-", "-", "-", "P", "-", "-", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "S")
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_4_D(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "-", "-", "P", "P", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "P", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "-", "-", "-", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "P", "P", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "P", "-", "-", "-", "-", "P", "P", "P", "P"],
            ["P", "-", "P", "-", "C", "P", "-", "P", "P", "P", "P", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "-", "-", "-", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "-", "P", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "-", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "P", "P", "P", "P", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "S", "P"],
        ]
        respuesta = validar_direccion(tablero, "D")
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_5_salida_W(self):
        tablero = [
            ["P", "P", "S", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "C", "-", "-", "-", "-", "P", "P", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "P", "-", "P", "P", "-", "P", "-", "-", "E"],
            ["P", "-", "-", "P", "P", "P", "-", "-", "P", "-", "P", "-", "P", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "-", "P", "-", "P", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "-", "P", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "P", "-", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "-", "P", "P", "P", "-", "P", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "-", "-", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "-", "-", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "W")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_6_salida_A(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "-", "-", "P", "P", "P", "P", "-", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "P", "P", "-", "-", "P", "P", "-", "P", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "-", "P", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "-", "-", "-", "-", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "P", "P", "-", "-", "P", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "-", "-", "P", "-", "P", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "P", "-", "P", "P", "-", "P", "P", "-", "-", "P", "P", "P"],
            ["P", "P", "P", "-", "-", "P", "-", "-", "-", "P", "-", "P", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "P", "-", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "P", "P", "P", "P", "-", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "P", "-", "-", "-", "P", "P", "-", "-", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "P", "-", "P", "P", "P", "-", "P", "P", "P"],
            ["S", "C", "-", "-", "P", "-", "-", "-", "P", "P", "-", "-", "P", "P", "P", "P"],
            ["P", "P", "P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "A")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_7_S(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "P", "-", "-", "P", "-", "P", "P", "P", "-", "P", "P", "-", "S"],
            ["P", "-", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "P", "-", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "P", "-", "P", "-", "P", "-", "P", "P"],
            ["E", "-", "P", "-", "-", "-", "P", "-", "P", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "-", "P", "P", "-", "P", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "-", "-", "P", "P", "-", "-", "P", "P", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "-", "-", "-", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "P", "-", "-", "C", "P", "P", "P", "P", "P", "P", "P", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "-", "-", "P", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "P", "-", "P", "-", "-", "P", "-", "P", "P", "P", "P", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "S")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_8_D(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P"],
            ["P", "-", "-", "-", "-", "P", "P", "P", "-", "P", "P", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "-", "P", "-", "-", "-", "-", "-", "P", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "-", "P", "P", "-", "P", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "P", "P", "-", "-", "-", "P", "P", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "P", "C", "-", "-", "P", "P", "P", "P", "-", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "P", "P", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "-", "P", "P", "-", "P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "S"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P", "P", "-", "P", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "P", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "-", "P", "-", "P", "-", "P", "P", "P"],
            ["P", "P", "-", "P", "P", "P", "-", "-", "P", "-", "P", "-", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "P", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "D")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_9_W(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "P", "P", "-", "P", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "P", "P", "-", "-", "P", "-", "-", "-", "-", "P", "P", "-", "E"],
            ["S", "-", "-", "P", "P", "-", "-", "P", "P", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "-", "P", "-", "-", "P", "-", "-", "P", "P"],
            ["P", "P", "-", "-", "P", "P", "P", "-", "-", "-", "P", "P", "-", "P", "P", "P"],
            ["P", "-", "P", "P", "P", "P", "-", "P", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "-", "P", "P", "P", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "P", "-", "P", "C", "P", "-", "-", "-", "-", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "P", "P", "P", "P", "P", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "P", "-", "-", "P", "P", "P", "P", "P", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "P", "P", "-", "-", "P", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "W")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_10_D(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "-", "P", "-", "-", "-", "P", "-", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "P", "P", "-", "P", "P", "P", "-", "-", "-", "-", "P", "P", "P", "-", "P"],
            ["P", "P", "-", "P", "-", "-", "-", "-", "P", "-", "-", "P", "-", "P", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "-", "P", "P", "P", "-", "P", "-", "-", "-", "S"],
            ["P", "P", "-", "P", "-", "-", "-", "P", "P", "-", "-", "P", "-", "P", "P", "P"],
            ["E", "-", "-", "-", "-", "-", "P", "-", "P", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "P", "-", "P", "P", "P", "P", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "P", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P", "P"],
            ["P", "P", "-", "P", "P", "P", "P", "C", "-", "P", "P", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "P", "P", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "-", "-", "P", "P", "-", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = validar_direccion(tablero, "D")
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)


if __name__ == "__main__":
    unittest.main(verbosity=2)
