import sys
import unittest

# Advertencia, la siguiente línea solo es utiliza por el cuerpo docente.
# Se considerará una mala práctica ocuparlo en sus evaluaciones.
sys.path.append("..")

from funciones_cliente import riesgo_mortal


class TestRiesgoMortal(unittest.TestCase):

    def test_con_riesgo_0_LH(self):
        tablero = [
            ["P", "P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "LH", "-", "-", "C", "-", "-", "-", "-", "-", "-", "-", "-", "-", "S"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_con_riesgo_1_LV(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "P", "P", "-", "P", "-", "-", "P", "P", "-", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "-", "-", "-", "P", "P", "P", "P", "-", "P"],
            ["P", "P", "P", "LH", "-", "-", "P", "P", "P", "-", "LV", "-", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "P", "-", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "P", "-", "P", "-", "P", "-", "-", "P", "P"],
            ["P", "-", "P", "P", "-", "-", "-", "-", "P", "-", "-", "-", "P", "-", "P", "P"],
            ["P", "P", "-", "P", "P", "-", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "P", "-", "-", "P", "LH", "-", "-", "-", "P", "P", "P", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "C", "P", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "-", "P", "-", "-", "-", "P", "-", "P", "-", "P", "P", "P"],
            ["P", "-", "P", "P", "-", "P", "P", "P", "-", "P", "P", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "P", "-", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "P", "-", "P", "P", "-", "P", "-", "P", "-", "LV", "P", "-", "-", "P", "P"],
            ["E", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_con_riesgo_2_CR(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "P", "-", "P", "LV", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "-", "-", "P", "P", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "LH", "-", "-", "-", "P", "P", "-", "P", "P", "P", "P", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "P", "-", "-", "P", "-", "-", "P", "P", "P"],
            ["P", "-", "-", "P", "P", "P", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "P", "-", "-", "P", "P", "-", "P", "P", "P"],
            ["P", "-", "-", "CR", "-", "-", "-", "C", "-", "P", "P", "P", "-", "-", "P", "P"],
            ["P", "P", "-", "-", "P", "P", "-", "-", "-", "P", "P", "P", "-", "P", "P", "P"],
            ["P", "P", "-", "P", "P", "P", "P", "-", "P", "-", "-", "P", "-", "-", "-", "P"],
            ["P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "P", "P", "-", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "-", "P", "-", "P", "-", "-", "-", "LH", "P", "P", "P"],
            ["P", "P", "-", "CD", "-", "P", "P", "-", "-", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "-", "-", "P", "-", "-", "P", "P", "-", "P", "P", "-", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_con_riesgo_3_CL(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "P", "-", "P", "-", "-", "P", "-", "P", "P", "-", "-", "P", "P"],
            ["P", "-", "P", "P", "-", "P", "P", "-", "-", "-", "-", "-", "CD", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "P", "-", "-", "-", "-", "P", "P", "P", "P"],
            ["P", "P", "P", "P", "-", "P", "P", "P", "P", "-", "P", "-", "P", "P", "-", "P"],
            ["P", "P", "-", "P", "P", "-", "-", "-", "P", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "CU", "P", "-", "P", "-", "P", "P", "P", "P", "P", "-", "P", "P", "P"],
            ["E", "-", "CL", "P", "P", "-", "P", "-", "P", "-", "P", "P", "P", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "P", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "P", "-", "P", "P", "-", "-", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "-", "C", "-", "-", "-", "CL", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "-", "-", "P", "P", "P", "P", "P", "-", "-", "-", "-", "-", "S"],
            ["P", "P", "-", "LH", "P", "-", "P", "-", "-", "-", "P", "P", "P", "-", "LV", "P"],
            ["P", "P", "P", "P", "P", "-", "-", "P", "P", "-", "-", "-", "P", "-", "P", "P"],
            ["P", "-", "P", "P", "P", "P", "-", "P", "P", "P", "P", "-", "P", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_con_riesgo_4_CU(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "P", "-", "LH", "-", "-", "P", "P", "P", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "P", "P", "P", "P", "P", "-", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "P", "P", "-", "-", "P", "-", "-", "-", "CU", "P", "P", "P", "LH", "-", "E"],
            ["P", "-", "P", "-", "P", "P", "P", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "P", "-", "-", "P", "P", "-", "-", "-", "LH", "P", "P", "P"],
            ["S", "-", "-", "C", "-", "-", "-", "-", "-", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "-", "P", "-", "P", "P", "-", "-", "P", "P", "-", "P", "-", "P", "-", "P"],
            ["P", "P", "P", "-", "-", "P", "P", "P", "-", "CR", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "-", "P", "P", "P", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "-", "-", "P", "P", "-", "P", "P", "P", "P", "-", "P"],
            ["P", "-", "-", "CU", "-", "-", "P", "-", "-", "P", "-", "-", "P", "-", "P", "P"],
            ["P", "P", "P", "P", "-", "-", "-", "-", "P", "-", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "-", "-", "LV", "-", "-", "-", "-", "-", "P"],
            ["P", "LV", "-", "-", "-", "-", "P", "-", "P", "-", "P", "-", "-", "P", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_con_riesgo_5_CD(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "P", "-", "P", "-", "P", "-", "-", "P"],
            ["P", "-", "P", "-", "-", "P", "-", "CD", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "P", "P", "-", "-", "-", "-", "P", "-", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "P", "P", "P", "-", "-", "P", "-", "-", "LH", "-", "-", "P"],
            ["P", "-", "LH", "-", "-", "-", "P", "C", "-", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "-", "-", "P", "-", "-", "P", "-", "P", "-", "P", "P", "-", "-", "LV", "P"],
            ["P", "P", "P", "-", "-", "P", "-", "P", "-", "P", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "P", "P", "-", "P", "-", "P", "-", "P", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "P", "-", "-", "P", "P", "-", "-", "-", "-", "P", "P", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "-", "-", "P", "-", "P", "P", "-", "P", "P"],
            ["P", "P", "-", "P", "P", "P", "-", "P", "P", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "P", "P", "P", "-", "P", "P", "P", "-", "P", "P", "-", "P"],
            ["P", "-", "CR", "-", "-", "P", "-", "-", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "-", "P", "-", "-", "-", "-", "LV", "P", "-", "P", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertTrue(respuesta)

    def test_sin_riesgo_0(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "S"],
            ["P", "-", "-", "-", "C", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["E", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_sin_riesgo_1(self):
        tablero = [
            ["P", "P", "P", "S", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "P", "P", "P", "P", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "P", "-", "P", "P", "P", "P", "-", "P", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "P", "P", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "-", "-", "-", "-", "P", "-", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "CU", "P", "-", "LH", "-", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P", "P"],
            ["P", "-", "LV", "-", "-", "-", "C", "P", "-", "LH", "-", "-", "P", "P", "P", "P"],
            ["P", "P", "P", "-", "-", "P", "-", "P", "-", "-", "P", "P", "P", "-", "P", "P"],
            ["P", "P", "P", "-", "P", "-", "P", "P", "-", "-", "P", "P", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "-", "CD", "P", "LV", "P", "P", "P", "P", "-", "-", "-", "P", "P"],
            ["P", "-", "P", "-", "-", "P", "P", "-", "P", "-", "-", "P", "LH", "-", "P", "P"],
            ["P", "-", "-", "P", "-", "-", "P", "-", "-", "P", "-", "P", "-", "-", "P", "P"],
            ["P", "-", "-", "-", "-", "P", "P", "-", "-", "-", "P", "-", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_sin_riesgo_2(self):
        tablero = [
            ["P", "E", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "P", "-", "P", "-", "P", "-", "P", "-", "-", "-", "P", "-", "P", "P"],
            ["P", "-", "-", "-", "P", "-", "-", "-", "-", "P", "P", "P", "P", "-", "-", "P"],
            ["P", "LV", "-", "-", "-", "LH", "-", "-", "-", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "P", "-", "CU", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "-", "-", "P", "-", "P", "-", "P", "-", "-", "P", "-", "P", "P", "P"],
            ["P", "P", "-", "-", "P", "-", "-", "P", "-", "-", "-", "-", "P", "-", "P", "P"],
            ["P", "P", "P", "-", "P", "-", "-", "CL", "-", "C", "-", "CR", "-", "P", "-", "P"],
            ["P", "-", "-", "LV", "-", "P", "P", "P", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "-", "-", "-", "-", "P", "-", "-", "-", "-", "-", "P", "LH", "-", "-", "S"],
            ["P", "-", "-", "P", "P", "-", "-", "-", "-", "-", "P", "P", "-", "P", "LV", "P"],
            ["P", "P", "-", "P", "-", "LH", "-", "-", "-", "-", "P", "P", "P", "-", "-", "P"],
            ["P", "P", "P", "-", "P", "P", "-", "-", "P", "CD", "-", "P", "-", "-", "P", "P"],
            ["P", "-", "P", "P", "P", "P", "-", "-", "-", "-", "P", "P", "-", "P", "-", "P"],
            ["P", "-", "P", "P", "-", "P", "-", "P", "-", "-", "-", "P", "P", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_sin_riesgo_3(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "E", "P"],
            ["P", "-", "P", "LH", "-", "-", "-", "P", "P", "-", "CR", "-", "-", "-", "-", "P"],
            ["P", "-", "P", "P", "P", "P", "-", "CD", "P", "P", "P", "-", "P", "-", "-", "P"],
            ["P", "-", "-", "-", "P", "-", "P", "-", "-", "-", "P", "-", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "-", "P", "-", "-", "-", "P", "CR", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "P", "P", "P", "P", "-", "P", "-", "-", "-", "P", "P", "-", "P"],
            ["P", "-", "-", "-", "-", "-", "P", "-", "P", "-", "-", "-", "-", "P", "-", "P"],
            ["P", "-", "-", "LV", "-", "P", "P", "P", "P", "P", "-", "-", "P", "-", "-", "P"],
            ["P", "-", "P", "-", "-", "-", "P", "-", "P", "-", "P", "-", "-", "-", "-", "P"],
            ["P", "CR", "-", "-", "P", "-", "-", "C", "-", "-", "-", "P", "P", "-", "CL", "P"],
            ["P", "P", "-", "-", "-", "-", "-", "-", "P", "P", "P", "P", "-", "P", "-", "P"],
            ["P", "P", "P", "P", "-", "-", "P", "P", "P", "P", "-", "-", "-", "-", "-", "P"],
            ["P", "P", "-", "-", "-", "-", "P", "P", "-", "P", "P", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "CL", "P", "-", "-", "-", "P", "-", "-", "-", "-", "-", "-", "P"],
            ["P", "-", "-", "P", "-", "P", "P", "-", "-", "-", "P", "P", "-", "P", "P", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "S", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)

    def test_sin_riesgo_4(self):
        tablero = [
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
            ["P", "-", "-", "CR", "-", "-", "P", "-", "-", "LH", "-", "-", "P", "-", "-", "P"],
            ["P", "P", "CD", "P", "-", "CL", "-", "P", "-", "P", "-", "P", "-", "-", "-", "P"],
            ["P", "-", "-", "P", "CU", "-", "P", "P", "-", "P", "-", "LH", "-", "P", "-", "P"],
            ["P", "-", "CD", "P", "CU", "P", "LH", "CD", "P", "P", "-", "-", "P", "-", "LH", "P"],
            ["S", "LV", "-", "P", "LV", "-", "CR", "-", "-", "CU", "P", "CR", "CL", "-", "P", "P"],
            ["P", "-", "P", "P", "-", "P", "-", "-", "C", "-", "P", "-", "CR", "-", "CL", "P"],
            ["P", "-", "-", "P", "CD", "-", "-", "P", "LH", "-", "-", "P", "P", "-", "-", "P"],
            ["P", "LV", "-", "-", "-", "-", "-", "P", "P", "-", "-", "P", "P", "P", "-", "E"],
            ["P", "-", "-", "P", "-", "-", "-", "-", "P", "-", "CL", "CD", "-", "-", "-", "P"],
            ["P", "P", "P", "-", "CR", "CR", "LV", "P", "-", "P", "-", "-", "-", "P", "-", "P"],
            ["P", "P", "-", "P", "P", "-", "P", "P", "P", "-", "LH", "-", "P", "-", "-", "P"],
            ["P", "-", "LH", "P", "-", "-", "P", "LV", "-", "-", "-", "CU", "CR", "-", "-", "P"],
            ["P", "-", "-", "CU", "-", "-", "P", "-", "CR", "-", "P", "-", "P", "-", "P", "P"],
            ["P", "-", "-", "-", "-", "CD", "P", "-", "-", "-", "-", "CL", "-", "-", "-", "P"],
            ["P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P"],
        ]
        respuesta = riesgo_mortal(tablero)
        self.assertIsInstance(respuesta, bool)
        self.assertFalse(respuesta)


if __name__ == "__main__":
    unittest.main(verbosity=2)
