import sys
import unittest

# Advertencia, la siguiente línea solo es utiliza por el cuerpo docente.
# Se considerará una mala práctica ocuparlo en sus evaluaciones.
sys.path.append("..")

from tablero import Tablero


class TestPeonesInvalidos(unittest.TestCase):

    def test_tablero_vacio(self):
        tablero_str = [
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
            ["--", "--", "--", "--", "--", "--", "--", "--"],
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 0)

    def test_12x12(self):
        tablero_str = [
            ['H4', 'H4', 'H4', '--', '--', 'PP', 'PP', 'H4', 'R8', '--', 'R8', 'H4'],
            ['PP', '--', 'PP', '--', 'PP', 'R8', '--', 'H4', 'PP', 'V9', 'PP', 'PP'],
            ['PP', '--', 'PP', 'PP', 'H5', 'V9', 'R1', '--', 'R8', 'PP', 'R8', '--'],
            ['--', 'V9', 'PP', '--', '--', '--', 'H4', '--', 'PP', 'PP', '--', 'V9'],
            ['H4', '--', 'PP', 'R8', 'V9', 'H4', '--', 'R8', '--', '--', '--', 'V9'],
            ['H4', 'PP', 'PP', '--', '--', 'V9', 'PP', 'R8', '--', '--', 'H4', 'H4'],
            ['PP', 'PP', 'V3', '--', '--', 'PP', 'PP', '--', '--', '--', 'R8', 'R8'],
            ['V9', '--', 'PP', '--', 'V5', 'PP', 'R8', 'V9', 'PP', '--', 'PP', 'PP'],
            ['--', 'PP', 'R8', '--', 'PP', 'V9', 'V9', 'PP', 'PP', 'V9', 'PP', 'H4'],
            ['--', 'V9', 'R8', 'R8', '--', 'PP', '--', 'PP', 'PP', '--', 'V9', '--'],
            ['PP', 'PP', 'PP', 'PP', '--', '--', 'R8', 'PP', 'R8', 'PP', '--', '--'],
            ['--', 'V2', 'R7', '--', 'H9', 'PP', 'PP', 'R8', '--', 'R8', '--', 'V6'],
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 16)

    def test_20x20(self):
        tablero_str = [
            ['R8', 'V9', 'PP', '--', 'PP', 'R8', 'PP', 'PP', '--', 'PP', 'PP', 'H4', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'H7'],
            ['PP', 'H4', 'V9', 'H4', 'PP', 'PP', 'PP', 'PP', 'PP', 'V9', 'PP', '--', 'PP', '--', 'H4', '--', '--', 'PP', 'PP', 'PP'],
            ['PP', 'R8', 'R8', 'PP', 'PP', '--', 'R8', 'PP', 'PP', 'V9', 'PP', 'PP', 'PP', 'PP', 'V9', 'V9', 'V9', '--', 'PP', 'PP'],
            ['PP', 'R8', 'PP', '--', 'PP', 'PP', '--', 'PP', 'PP', 'PP', 'H4', 'PP', 'H4', 'PP', 'H4', 'H3', 'V9', '--', 'PP', 'PP'],
            ['PP', 'PP', 'PP', 'PP', 'PP', 'R8', 'PP', 'V9', 'V9', 'PP', 'R8', 'R8', '--', 'PP', 'PP', 'PP', 'PP', 'R8', 'PP', 'PP'],
            ['PP', 'H4', 'PP', 'PP', 'PP', 'PP', '--', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'H4', 'R8', 'PP', 'PP', '--'],
            ['PP', '--', 'PP', 'H4', 'H4', 'R8', 'V9', 'PP', 'V9', 'PP', 'PP', '--', 'PP', 'R8', 'PP', 'PP', 'V5', 'PP', 'PP', 'PP'],
            ['PP', '--', 'PP', 'PP', 'R8', 'PP', 'V9', 'V9', 'R4', 'PP', 'H4', 'PP', 'PP', '--', 'PP', 'PP', '--', 'R8', 'PP', 'PP'],
            ['PP', 'PP', 'PP', 'H4', 'PP', 'PP', 'PP', 'PP', 'PP', 'H4', 'R8', 'PP', 'PP', 'V2', 'PP', 'PP', 'PP', 'PP', '--', 'PP'],
            ['PP', 'R8', 'R8', 'V9', 'H4', 'PP', '--', 'R8', 'R8', 'H4', 'V9', '--', 'PP', 'PP', 'R8', '--', 'PP', 'V9', 'PP', 'R8'],
            ['PP', 'PP', 'H4', 'PP', 'PP', 'PP', 'H4', 'R8', 'PP', 'PP', 'R8', 'V9', 'PP', 'PP', '--', '--', 'PP', 'V9', 'PP', 'PP'],
            ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', '--', 'PP', 'PP', 'R8', 'V9', 'PP', 'PP'],
            ['PP', 'H4', 'PP', 'PP', 'PP', 'V9', 'PP', 'R8', '--', 'PP', 'PP', 'PP', 'R8', 'PP', 'PP', 'H4', 'PP', 'PP', 'H4', 'H4'],
            ['H4', 'PP', '--', 'PP', 'PP', '--', 'H4', 'PP', 'PP', 'V9', 'PP', 'V9', 'H4', 'PP', '--', 'PP', 'H4', 'PP', 'PP', 'H4'],
            ['V9', 'H4', 'PP', 'PP', 'PP', 'PP', 'PP', 'H4', '--', 'V9', '--', '--', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'V9'],
            ['PP', 'PP', '--', 'PP', '--', 'PP', 'PP', 'H4', 'PP', 'R8', 'H6', 'PP', '--', 'H4', 'PP', 'H4', 'H4', 'PP', '--', 'PP'],
            ['V9', 'PP', '--', 'PP', '--', 'PP', '--', 'R8', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'V9', 'PP', 'PP', 'PP', '--'],
            ['H4', 'PP', 'PP', '--', 'PP', 'PP', 'R8', 'R8', '--', 'PP', '--', 'PP', 'PP', 'PP', 'H4', '--', '--', 'PP', 'PP', 'PP'],
            ['PP', 'H4', 'PP', 'PP', 'H4', 'H4', 'PP', 'PP', '--', 'V8', 'PP', '--', 'H4', 'PP', 'PP', 'H4', 'PP', 'V9', 'PP', 'PP'],
            ['PP', '--', 'PP', 'H4', 'PP', 'PP', 'R8', 'PP', 'PP', 'PP', 'V8', 'PP', 'PP', 'PP', 'PP', 'PP', '--', 'PP', 'R8', 'PP'],
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 185)


    def test_32x32(self):
        tablero_str = [
                ['PP', 'R3', '--', 'R6', 'PP', '--', '--', 'PP', 'V9', '--', 'V9', 'PP', '--', 'PP', 'PP', '--', '--', '--', 'PP', 'PP', '--', 'R8', 'H4', 'PP', 'PP', 'R8', '--', 'R8', 'PP', '--', 'R8', 'V9'],
                ['PP', 'PP', 'V9', '--', 'R8', 'PP', '--', '--', '--', 'V1', 'H6', 'PP', 'PP', 'PP', '--', '--', '--', '--', '--', 'PP', 'PP', '--', 'R8', 'R8', 'R8', 'PP', 'R8', 'H4', 'H4', 'PP', 'PP', 'PP'],
                ['R8', 'PP', 'V9', 'V9', 'V8', 'V9', 'PP', 'PP', 'PP', 'R8', 'PP', 'R8', '--', '--', 'R5', '--', '--', 'PP', '--', 'PP', 'V2', 'R8', 'PP', '--', '--', 'PP', '--', 'R8', 'R8', 'PP', '--', 'PP'],
                ['PP', 'R8', '--', '--', 'R8', 'R8', '--', 'PP', 'R7', 'PP', 'R8', '--', 'PP', 'PP', 'V9', '--', '--', 'PP', 'PP', 'PP', 'PP', 'PP', '--', '--', '--', 'PP', 'PP', 'R8', 'H4', 'R8', 'PP', 'V3'],
                ['R8', 'R8', 'H4', 'PP', 'R8', 'R8', 'PP', 'R8', '--', '--', '--', 'PP', 'PP', '--', 'PP', 'V3', '--', '--', 'PP', 'R8', 'R8', 'PP', 'R8', 'R8', 'H8', 'PP', '--', 'PP', '--', '--', 'V9', 'V9'],
                ['V9', 'R8', '--', '--', 'PP', 'R8', 'V9', 'H2', 'H4', '--', 'H4', 'V9', '--', 'R8', 'PP', 'H4', 'PP', '--', 'R8', 'R8', 'PP', 'PP', '--', '--', '--', '--', 'PP', 'H4', 'PP', '--', '--', 'H3'],
                ['--', '--', '--', 'PP', '--', '--', '--', 'PP', 'V9', '--', '--', '--', 'PP', 'R8', 'PP', '--', '--', 'V9', 'R8', '--', 'PP', '--', '--', 'PP', 'V9', 'PP', '--', 'V9', 'PP', 'PP', '--', 'V9'],
                ['PP', '--', 'PP', 'V9', '--', 'PP', 'V9', '--', '--', 'PP', 'R8', 'R8', '--', 'R8', 'PP', 'R8', '--', '--', 'V9', 'PP', 'PP', 'H5', 'R8', '--', '--', 'PP', '--', '--', 'PP', 'PP', '--', 'R8'],
                ['PP', '--', 'PP', '--', 'PP', 'PP', '--', 'H5', 'R8', 'V9', 'PP', '--', '--', 'H4', '--', '--', 'V9', 'R8', '--', 'V3', '--', 'PP', 'PP', '--', 'PP', 'PP', 'PP', '--', 'PP', '--', 'V9', 'PP'],
                ['--', 'PP', 'R8', '--', 'PP', 'PP', 'PP', 'H6', '--', 'R8', 'PP', '--', 'R8', 'R8', 'R8', 'H8', '--', '--', '--', 'PP', '--', '--', 'PP', '--', '--', 'PP', 'R8', '--', 'PP', '--', 'R8', 'H4'],
                ['--', 'V9', '--', 'PP', 'V9', '--', '--', 'PP', 'PP', 'PP', '--', 'R8', 'PP', 'R8', 'R8', '--', 'PP', 'PP', 'PP', 'PP', 'H4', 'PP', 'R8', '--', 'V9', 'PP', 'PP', '--', '--', 'PP', '--', '--'],
                ['PP', 'PP', 'R8', '--', '--', '--', 'PP', 'R8', 'PP', 'R8', '--', 'H9', 'PP', '--', 'R8', 'R8', 'PP', 'PP', 'PP', 'PP', 'PP', '--', '--', 'PP', 'PP', 'PP', '--', '--', '--', 'R8', '--', '--'],
                ['--', '--', 'PP', 'PP', '--', '--', '--', '--', 'H4', '--', 'PP', 'R8', 'PP', 'R8', 'R7', '--', '--', '--', 'PP', '--', 'V5', 'R8', '--', '--', 'PP', 'PP', '--', 'PP', 'V9', 'PP', 'PP', '--'],
                ['--', 'V9', 'PP', 'H3', 'PP', 'R8', 'V9', '--', 'PP', 'PP', '--', 'R8', '--', '--', '--', '--', 'R8', 'PP', 'PP', 'PP', '--', 'PP', 'PP', '--', '--', 'PP', 'PP', 'PP', 'PP', 'PP', '--', 'R3'],
                ['R8', '--', 'R8', '--', '--', 'H4', 'R8', 'PP', 'V1', 'PP', 'R8', 'PP', '--', '--', 'PP', 'R8', 'PP', 'PP', 'R8', 'R8', '--', 'R8', 'V9', '--', '--', 'PP', 'PP', 'PP', '--', '--', 'H4', 'H4'],
                ['R8', 'R5', '--', 'PP', 'R8', '--', 'R8', 'PP', '--', '--', 'PP', '--', 'PP', 'H4', 'PP', '--', 'PP', 'PP', 'PP', '--', 'PP', '--', '--', '--', 'R8', 'R8', 'PP', 'PP', 'R1', '--', 'H4', 'H4'],
                ['--', 'R8', '--', 'PP', 'R8', 'PP', 'R8', 'V9', 'H4', 'PP', 'PP', 'R8', 'PP', 'PP', 'PP', '--', '--', 'R8', 'PP', 'PP', 'R7', 'PP', 'H4', '--', 'PP', 'PP', '--', 'PP', 'V4', '--', '--', '--'],
                ['H1', 'R8', '--', 'H4', 'PP', 'PP', 'PP', 'PP', 'V4', 'R8', 'R8', '--', '--', '--', 'PP', 'H7', '--', 'PP', 'R8', 'PP', 'PP', 'PP', '--', 'PP', 'V9', 'H4', '--', 'R8', 'PP', 'R8', 'PP', '--'],
                ['PP', 'PP', 'R8', 'V9', 'R8', '--', 'V9', '--', 'V9', 'R8', '--', '--', '--', '--', 'PP', '--', 'V6', '--', 'R6', '--', 'PP', '--', 'PP', 'PP', 'R8', 'H4', '--', 'PP', 'PP', 'PP', 'H9', '--'],
                ['PP', '--', '--', '--', 'PP', 'PP', '--', 'R8', 'PP', 'PP', '--', 'PP', '--', '--', '--', 'PP', 'H4', 'R1', '--', '--', 'R8', 'PP', 'V9', 'PP', 'PP', '--', 'R8', 'V8', 'PP', '--', '--', 'PP'],
                ['--', 'PP', '--', '--', 'PP', 'PP', 'PP', 'V9', 'PP', 'R8', 'V9', 'H4', 'H5', 'PP', '--', '--', '--', '--', '--', '--', 'V9', 'PP', '--', 'H4', '--', 'H4', 'PP', 'H4', 'V9', 'V9', '--', '--'],
                ['--', '--', 'V3', 'PP', '--', 'H2', '--', 'PP', '--', '--', 'PP', '--', 'PP', 'PP', '--', '--', '--', 'R8', 'PP', 'PP', 'PP', '--', '--', '--', 'PP', 'PP', '--', 'PP', 'PP', '--', 'R8', 'R8'],  
                ['R8', 'H4', 'PP', 'H4', 'R8', 'PP', '--', 'PP', '--', 'PP', '--', 'V4', 'PP', 'R8', 'H4', '--', '--', '--', '--', '--', 'V9', 'PP', '--', 'R8', 'PP', 'H4', 'R8', 'PP', 'R8', '--', 'H1', 'PP'],
                ['V9', 'H4', '--', 'H4', '--', 'PP', 'R8', '--', '--', '--', 'H4', 'PP', 'PP', 'V9', 'V9', 'R8', 'V9', 'PP', 'PP', 'R8', '--', '--', 'PP', 'R8', '--', 'PP', '--', 'PP', 'PP', 'PP', 'PP', 'R8'],
                ['R8', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', '--', 'PP', 'PP', 'PP', '--', 'PP', '--', 'PP', 'PP', 'PP', '--', 'PP', 'PP', 'R4', '--', 'PP', 'PP', '--', '--', 'V6', 'PP', 'R8', 'R8', '--', '--'],  
                ['H4', 'PP', 'PP', 'R8', '--', '--', 'H3', 'PP', '--', 'PP', '--', '--', '--', 'PP', 'R8', '--', '--', 'H4', 'R8', 'PP', '--', '--', '--', '--', '--', '--', 'R8', 'PP', 'PP', '--', 'PP', '--'],
                ['PP', 'H4', 'R8', '--', 'PP', 'PP', 'PP', 'PP', 'R8', 'PP', 'PP', 'R8', 'H4', '--', 'PP', '--', 'PP', 'PP', 'R8', 'R8', 'H4', 'R8', 'PP', '--', '--', 'PP', '--', 'R8', 'V9', 'H4', '--', '--'],
                ['V9', 'R8', 'PP', 'V8', '--', 'R3', 'V9', '--', 'PP', 'PP', 'PP', 'PP', '--', 'V9', 'R8', 'R8', 'H4', 'PP', 'V4', 'R8', 'PP', 'PP', 'PP', 'PP', 'R8', '--', '--', 'PP', 'V9', 'PP', '--', 'PP'],
                ['PP', 'R4', 'PP', 'PP', 'R8', 'PP', 'PP', 'PP', 'V9', '--', 'PP', 'PP', 'H4', 'PP', 'R7', 'R8', '--', 'PP', '--', '--', '--', 'PP', '--', 'PP', '--', '--', 'R8', '--', 'V3', '--', '--', 'H4'],
                ['PP', 'V9', '--', 'PP', 'PP', '--', 'R8', '--', 'R8', '--', 'PP', 'PP', '--', 'V5', '--', 'PP', 'PP', 'PP', '--', 'R2', '--', 'R8', 'R8', 'PP', 'PP', 'PP', '--', 'H4', '--', 'PP', '--', 'PP'],
                ['H4', 'PP', 'PP', '--', 'PP', 'PP', '--', 'PP', 'R8', '--', 'R8', '--', 'V9', 'R8', 'H4', 'R8', '--', '--', '--', 'R8', 'PP', 'PP', 'PP', 'PP', 'PP', '--', 'PP', 'PP', 'PP', 'R3', 'V9', 'R1'],
                ['--', 'PP', 'R8', 'PP', 'PP', 'PP', 'V1', 'PP', '--', 'PP', '--', '--', 'PP', 'PP', 'R8', 'PP', '--', 'R1', 'R8', 'PP', 'PP', '--', 'R8', 'PP', 'PP', 'V9', '--', '--', 'R4', '--', 'H4', '--'],
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 170)

    def test_tablero_solo_peones(self):
        tablero_str = [
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'],     
                ['PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP', 'PP'], 
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 1024)


    def test_tablero_sin_peones(self):
        tablero_str = [
                ['R1', '--', 'R6', '--', '--', 'V9', 'V9', '--', 'H4', 'R8', 'R8', 'H4', '--', 'R8', '--', 'H4', 'R2', '--', 'R8', 'R8', '--', 'R8', '--', '--', '--', 'R8', '--', '--', '--', 'V9', 'R8', 'R8'],
                ['--', 'R8', '--', '--', 'R8', '--', 'H4', 'R8', 'R8', '--', 'R8', '--', 'R8', 'V9', 'V6', 'R5', 'R8', '--', '--', 'V9', 'R8', 'R8', '--', '--', '--', '--', '--', '--', '--', 'V9', '--', 'R8'],
                ['V9', '--', 'R8', '--', '--', '--', 'R5', 'R8', 'R8', 'H4', 'R8', '--', '--', 'V9', '--', '--', 'R8', 'R8', '--', '--', 'H4', 'V9', '--', 'R8', '--', '--', 'R8', '--', 'H9', '--', 'R8', '--'],
                ['R8', 'R8', '--', 'R8', '--', '--', '--', '--', '--', '--', 'R8', '--', '--', 'R9', '--', '--', '--', '--', 'R8', '--', 'V9', 'V9', 'R8', 'R8', 'R8', 'R8', '--', '--', 'R7', '--', '--', '--'],
                ['--', '--', 'R4', 'V9', '--', 'H4', 'H3', 'H4', '--', '--', 'R8', '--', 'R8', '--', '--', 'H4', '--', '--', '--', 'R8', 'R8', 'H4', '--', '--', '--', '--', 'H6', '--', '--', '--', '--', '--'],
                ['--', 'R8', 'H4', '--', '--', 'H3', '--', 'R8', '--', '--', '--', '--', 'R8', '--', 'R1', '--', 'V9', 'R8', 'H4', '--', '--', '--', 'H4', 'H4', 'R8', 'R8', 'V9', 'R8', 'R8', '--', '--', '--'],
                ['H2', 'H4', '--', 'R8', '--', '--', '--', '--', 'V9', 'V9', '--', '--', 'R8', 'R8', '--', '--', '--', '--', 'H4', '--', '--', 'H4', '--', '--', 'V9', 'R8', 'R8', '--', 'R8', 'H4', '--', '--'],
                ['--', 'R4', 'H4', '--', '--', 'H6', '--', '--', '--', 'V9', 'R8', '--', '--', 'V9', 'R3', 'R8', 'R8', 'R8', '--', 'R8', 'R8', '--', 'V9', '--', 'R8', '--', '--', 'H8', 'R8', 'R8', 'R8', '--'],
                ['--', '--', '--', '--', 'R8', '--', '--', '--', 'R8', '--', 'V4', 'R8', 'R8', '--', 'H4', 'H6', '--', 'R8', 'R1', '--', '--', '--', '--', '--', '--', 'R8', 'H7', 'R8', '--', '--', 'H4', 'R7'],
                ['--', '--', '--', '--', '--', 'H4', '--', 'R8', '--', 'R8', '--', '--', 'H4', 'H4', 'R8', 'V9', '--', 'V9', '--', 'H4', '--', '--', 'R8', '--', 'R8', '--', 'V8', 'R8', '--', 'R8', '--', '--'],
                ['V9', '--', '--', '--', '--', '--', 'R8', 'R8', '--', 'V9', 'R8', 'R8', '--', 'R8', 'R8', 'R8', '--', '--', '--', '--', 'H4', '--', '--', 'R8', 'V2', '--', 'R8', 'V9', 'H4', 'R8', '--', 'R8'],
                ['--', 'V1', 'H4', '--', 'H7', '--', 'H1', 'R1', '--', '--', '--', 'R8', '--', 'R8', 'R8', '--', '--', 'R8', '--', 'H4', 'R5', 'R8', 'H4', '--', 'R8', '--', 'H4', 'R8', 'R8', '--', 'R8', '--'],
                ['--', 'R8', '--', '--', '--', '--', '--', '--', 'V9', 'R8', '--', 'R8', 'R4', 'V3', '--', '--', '--', 'R8', 'R8', '--', '--', 'R8', '--', '--', '--', 'H4', '--', '--', 'V9', '--', '--', 'V9'],
                ['R8', 'R8', '--', 'V2', 'R7', 'H4', '--', '--', '--', 'R8', 'R8', 'H9', '--', 'V9', '--', 'R8', '--', 'H4', 'H4', 'R8', 'R8', 'H5', '--', 'R8', 'H4', 'V9', 'R8', 'V9', '--', 'H4', '--', 'H4'],
                ['R8', '--', '--', '--', 'R3', 'R8', 'V9', 'H3', '--', 'R8', 'R8', '--', 'V9', 'V9', 'R8', '--', '--', 'R8', '--', '--', 'H4', 'H4', 'R8', '--', 'R8', 'R8', 'V9', 'H4', '--', '--', '--', 'H4'],
                ['H4', '--', 'H4', 'H4', '--', 'V6', '--', '--', 'R8', 'R8', 'R8', 'H4', '--', 'H4', 'H7', '--', 'R8', 'R8', '--', 'R8', '--', '--', 'V9', 'R8', '--', '--', 'R8', '--', '--', 'R8', '--', 'H4'],
                ['R8', '--', '--', '--', '--', 'V1', 'R8', '--', 'H7', '--', '--', 'R8', '--', '--', '--', 'H9', '--', '--', '--', 'R8', 'R8', 'R1', 'R8', 'R8', 'H8', 'H4', '--', 'R4', '--', '--', '--', '--'],
                ['R8', 'V9', 'H9', 'R6', '--', 'R8', 'V9', '--', '--', 'R8', '--', 'V1', 'H4', 'R8', '--', 'R8', '--', 'H4', 'H4', '--', '--', '--', '--', 'V9', '--', '--', '--', '--', '--', 'V3', '--', '--'],
                ['R8', 'R4', '--', 'V9', '--', 'R8', '--', '--', '--', 'H4', 'R8', '--', 'R8', 'H4', 'H4', '--', '--', 'R8', '--', 'R8', 'H4', '--', 'V9', 'V9', '--', 'H2', '--', '--', 'R8', '--', '--', 'H4'],
                ['--', '--', '--', '--', 'H2', 'R8', 'R8', 'R8', '--', '--', 'H4', '--', '--', '--', '--', '--', 'R8', 'H7', 'V9', 'V9', 'R8', 'V9', 'R8', 'R9', '--', 'R2', '--', '--', 'H4', '--', 'R8', 'R8'],
                ['--', 'R8', 'H4', 'H7', '--', 'R8', '--', 'V9', 'V9', 'R8', 'H7', '--', 'R8', 'H4', '--', 'H7', 'R8', 'V9', 'R5', 'R8', 'R8', '--', 'R8', '--', '--', '--', 'R8', '--', '--', 'R8', 'H4', 'H4'],
                ['--', '--', '--', '--', 'H4', 'R8', 'V9', '--', '--', '--', '--', '--', '--', 'R8', 'R8', '--', 'V4', '--', 'V9', 'R8', '--', 'R8', 'R8', '--', '--', '--', 'R8', '--', 'V9', 'H2', 'R8', 'R2'],
                ['--', 'R8', 'R8', '--', 'V9', '--', 'R8', 'V1', '--', '--', '--', 'R8', 'R8', '--', '--', '--', '--', 'R8', 'H4', '--', 'R5', '--', '--', '--', 'R8', '--', 'R8', 'V7', '--', 'R8', 'R8', '--'],
                ['--', '--', '--', '--', '--', 'V9', '--', 'V9', '--', '--', 'R8', '--', '--', '--', 'R8', 'V8', '--', '--', '--', '--', '--', '--', '--', 'R8', '--', 'H2', '--', '--', '--', 'R6', 'H4', 'R8'],
                ['H3', '--', '--', 'R8', 'V9', 'V9', '--', '--', 'R8', '--', 'R8', 'V9', '--', 'V9', 'R8', '--', 'R8', 'R8', 'R8', '--', 'H4', '--', '--', 'R9', 'H2', '--', '--', 'R8', 'H4', '--', '--', '--'],
                ['R8', '--', '--', 'V9', '--', '--', 'R8', 'R8', 'V9', '--', '--', 'R8', '--', '--', '--', '--', '--', 'R8', '--', '--', '--', '--', 'H4', 'R8', 'H6', 'H1', 'R8', 'R8', '--', 'R1', 'R8', 'R8'],
                ['--', '--', 'H5', '--', 'V9', 'R8', 'H4', '--', '--', '--', '--', '--', 'H4', '--', '--', 'R8', '--', '--', 'V9', 'H4', '--', '--', 'V9', '--', 'R8', 'H2', 'V9', '--', '--', 'H4', 'R8', '--'],
                ['--', 'R8', 'R8', '--', 'R8', '--', '--', '--', '--', '--', '--', '--', 'V9', '--', 'H4', 'H4', '--', 'H9', 'R8', '--', '--', 'R8', 'R8', 'V9', 'H4', '--', '--', 'H4', '--', 'R8', 'R8', 'R8'],
                ['--', 'V9', 'R8', 'V9', '--', 'H4', 'R8', '--', 'R2', 'V6', '--', 'R9', 'R1', '--', 'R8', 'R8', 'V9', '--', 'R8', 'H4', '--', 'R8', '--', 'R8', '--', '--', '--', 'R8', '--', 'R8', 'R8', '--'],
                ['H4', 'R8', 'R7', 'H4', 'R8', '--', 'R8', 'R8', '--', '--', '--', 'V9', '--', '--', '--', '--', '--', '--', '--', 'R8', '--', '--', '--', 'H4', '--', '--', '--', 'V9', 'H4', 'V4', 'R8', 'R8'],
                ['V9', '--', '--', '--', '--', 'V9', '--', 'V9', '--', '--', 'V9', '--', '--', '--', '--', 'R8', 'R4', '--', 'R8', '--', '--', '--', 'H3', '--', 'R8', '--', '--', 'R8', '--', '--', '--', '--'],
                ['V9', '--', 'R8', '--', '--', '--', 'R8', 'R8', '--', 'H4', 'H2', 'R8', '--', 'R8', 'R8', 'R8', 'H4', 'V9', 'V9', 'R8', '--', 'R8', 'R8', '--', 'H5', '--', '--', '--', '--', '--', 'R8', 'R8'],
        ]
        tablero = Tablero(tablero_str)
        respuesta = tablero.peones_invalidos
        # Verificar formato y respuesta
        self.assertIsInstance(respuesta, int)
        self.assertEqual(respuesta, 0)



if __name__ == "__main__":
    from io import StringIO
    from unittest.mock import patch

    with patch('sys.stdout', new=StringIO()):
        unittest.main(verbosity=1)
